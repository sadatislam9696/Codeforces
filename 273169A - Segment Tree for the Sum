#include <bits/stdc++.h>
using   namespace   std;
#define      nn     '\n'
#define  ll    long long

const int N = 1e5 + 9;
ll a[N], tree[1LL * 3 * N];

void build(ll node, ll l, ll r){
    if(l == r){
        tree[node] = a[l];
        return;
    }
    build(2 * node, l, ((l + r) / 2));
    build(2 * node + 1, ((l + r) / 2) + 1, r);

    tree[node] = tree[2 * node] + tree[2 * node + 1];
}
void update(ll node, ll l, ll r, int i, int v){
    if(i > r or i < l){
        return;
    }
    if(i == l and i == r){
        tree[node] = v;
//        a[i] = v;
        return;
    }

    update(2 * node, l, ((l + r) / 2), i, v);
    update(2 * node + 1, ((l + r) / 2) + 1, r, i, v);

    tree[node] = (tree[2 * node] + tree[2 * node + 1]);
}
ll query(ll node, ll l, ll r, ll i, ll j){
    if(r < i or l > j){
        return 0;
    }
    if(l >= i and r <= j){
        return tree[node];
    }

    ll left_value = query(2 * node, l, ((l + r) / 2), i, j);
    ll right_value = query(2 * node + 1, ((l + r) / 2) + 1, r, i, j);

    return  left_value + right_value;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int t = 1;
    //cin >> t;
    while(t--)
    {
      int n, m;
      cin >> n >> m;
      for(int i = 0; i < n; i++){
        cin >> a[i];
      }
      build(1, 0, n - 1);
      while(m--){
        int c;
        cin >> c;
        if(c == 1){
            int i, v;
            cin >> i >> v;
            update(1, 0, n - 1, i, v);
        }
        else{
            int l, r; cin >> l >> r;
            cout << query(1, 0, n - 1, l, r - 1) << nn;
        }
      }
    }
    return 0;
}
